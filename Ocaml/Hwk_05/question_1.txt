Zhongyi Sun
Student ID: 5320262
X500: sunx0725

sum [] = 0
sum x::xs -> x + sum xs

take 0 lst = [ ]
take n [ ] = [ ]
take n (x::xs) = x::take (n-1) xs

some_squares_from 0 v = [ ]
some_squares_from n v = v*v :: some_squares_from (n-1) (v+1)



sum (take 3 (some_squares_from 5 1))


//call by value 
  sum (take 3 (some_squares_from 5 1))
= sum (take 3 (1*1 :: some_squares_from (5-1) (1+1))
= sum (take 3 (1 :: some_squares_from (5-1) (1+1))
= sum (take 3 (1 :: some_squares_from 4 (1+1))
= sum (take 3 (1 :: some_squares_from 4 2)
= sum (take 3 (1 :: 2*2 :: some_squares_from (4-1) (2+1))
= sum (take 3 (1 :: 4 :: some_squares_from (4-1) (2+1))
= sum (take 3 (1 :: 4 :: some_squares_from 3 (2+1))
= sum (take 3 (1 :: 4 :: some_squares_from 3 3)
= sum (take 3 (1 :: 4 :: 3*3 :: some_squares_from (3-1) (3+1))
= sum (take 3 (1 :: 4 :: 9 :: some_squares_from (3-1) (3+1))
= sum (take 3 (1 :: 4 :: 9 :: some_squares_from 2 (3+1))
= sum (take 3 (1 :: 4 :: 9 :: some_squares_from 2 4)
= sum (take 3 (1 :: 4 :: 9 :: 4*4 :: some_squares_from (2-1) (4+1))
= sum (take 3 (1 :: 4 :: 9 :: 16 :: some_squares_from (2-1) (4+1))
= sum (take 3 (1 :: 4 :: 9 :: 16 :: some_squares_from 1 (4+1))
= sum (take 3 (1 :: 4 :: 9 :: 16 :: some_squares_from 1 5)
= sum (take 3 (1 :: 4 :: 9 :: 16 :: 5*5 ::some_squares_from (1-1) (5+1))
= sum (take 3 (1 :: 4 :: 9 :: 16 :: 25 ::some_squares_from (1-1) (5+1))
= sum (take 3 (1 :: 4 :: 9 :: 16 :: 25 ::some_squares_from 0 (5+1))
= sum (take 3 (1 :: 4 :: 9 :: 16 :: 25 ::some_squares_from 0 6)
= sum (take 3 (1 :: 4 :: 9 :: 16 :: 25 :: [])
= sum (1 :: take (3-1) (4 :: 9 :: 16 :: 25 :: [])
= sum (1 :: take 2 (4 :: 9 :: 16 :: 25 :: [])
= sum (1 :: 4 :: take (2-1) (9 :: 16 :: 25 :: [])
= sum (1 :: 4 :: take 1 (9 :: 16 :: 25 :: [])
= sum (1 :: 4 :: 9 :: take (1-1) (16 :: 25 :: [])
= sum (1 :: 4 :: 9 :: take 0 (16 :: 25 :: [])
= sum (1 :: 4 :: 9 :: [])
= 1 +（sum(4 :: 9 :: [])）
= 1 +（4 + sum (9 :: []))
= 1 +（4 + (9 + sum([])))
= 1 + (4 + (9+0))
= 1 + (4 + 9)
= 1 + 13
= 14



//call by name 
sum (take 3 (some_squares_from 5 1))
= sum (take 3 (1*1 :: some_squares_from (5-1) (1+1))   
= sum (1*1 :: take (3-1) (some_squares_from (5-1) (1+1)))
= 1*1 + sum (take (3-1) (some_squares_from (5-1) (1+1)))
= 1 + sum (take (3-1) (some_squares_from (5-1) (1+1)))
= 1 + sum (take 2 (some_squares_from (5-1) (1+1)))
= 1 + sum (take 2 (some_squares_from 4 (1+1)))
= 1 + sum (take 2 (((1+1)*(1+1)) :: some_squares_from (4-1) ((1+1)+1))) 
= 1 + sum (take 2 (((1+1)*(1+1)) :: some_squares_from (4-1) ((1+1)+1))) 
= 1 + sum ((1+1)*(1+1) :: take (2-1) (some_squares_from (4-1) ((1+1)+1))))
= 1 + (((1+1)*(1+1) + sum (take (2-1) (some_squares_from (4-1) ((1+1)+1)))))
= 1 + (2*(1+1) + sum (take (2-1) (some_squares_from (4-1) ((1+1)+1)))))
= 1 + (2*2 + sum (take (2-1) (some_squares_from (4-1) ((1+1)+1)))))
= 1 + (4 + sum (take (2-1) (some_squares_from (4-1) ((1+1)+1)))))
= 1 + (4 + sum (take 1 (some_squares_from (4-1) ((1+1)+1)))))
= 1 + (4 + sum (take 1 (some_squares_from 3 ((1+1)+1)))))
= 1 + (4 + (sum (take 1 (((1+1)+1)*((1+1)+1) :: some_squares_from (3-1)(((1+1)+1)+1))))
= 1 + (4 + (sum (take 1 (((1+1)+1)*((1+1)+1) :: some_squares_from (3-1)(((1+1)+1)+1))))
= 1 + (4 + (sum ( ((1+1)+1)*((1+1)+1) ::take (1-1) (some_squares_from (3-1)(((1+1)+1)+1))))
= 1 + (4 + ((1+1)+1)*((1+1)+1) + sum ( take (1-1) (some_squares_from (3-1)(((1+1)+1)+1))))) 
= 1 + (4 + ((2+1)*((1+1)+1) + sum ( take (1-1) (some_squares_from (3-1) (((1+1)+1)+1)))))
= 1 + (4 + (3*((1+1)+1) + sum ( take (1-1) (some_squares_from (3-1) (((1+1)+1)+1)))))
= 1 + (4 + (3*(2+1) + sum ( take (1-1) (some_squares_from (3-1) (((1+1)+1)+1)))))
= 1 + (4 + (3*3 + sum ( take (1-1) (some_squares_from (3-1) (((1+1)+1)+1)))))
= 1 + (4 + (9 + sum ( take (1-1) (some_squares_from (3-1) (((1+1)+1)+1)))))
= 1 + (4 + (9 + sum ( take 0 (some_squares_from (3-1) (((1+1)+1)+1)))))
= 1 + (4 + (9 + sum ([])))
= 1 + (4 + (9 + 0)
= 1 + (4 + 9)
= 1 + 13
= 14




//lazy evaluation
   sum (take 3 (some_squares_from 5 1))
= sum (take 3 (1*1 :: some_squares_from (5-1) (1+1))   
= sum (1*1 :: take (3-1) some_squares_from (5-1) (1+1))
= 1*1 + sum (take (3-1) some_squares_from (5-1) (1+1))
= 1 + sum (take (3-1) some_squares_from (5-1) (1+1))
= 1 + sum (take 2 some_squares_from (5-1) (1+1))
= 1 + sum (take 2 some_squares_from 4 (1+1))
= 1 + sum (take 2 ((v*v) :: some_squares_from (4-1) (v+1))) where v = 1+1
= 1 + sum (v*v :: take (2-1) some_squares_from (4-1) (v+1))) where v = 1+1
= 1 + (v*v + sum (take (2-1) some_squares_from (4-1) (v+1)))) where v = 1+1
= 1 + (v*v + sum (take (2-1) some_squares_from (4-1) (v+1)))) where v = 2
= 1 + (2*2 + sum (take (2-1) some_squares_from (4-1) (2+1)))) 
= 1 + (4 + sum (take (2-1) some_squares_from (4-1) (2+1)))) 
= 1 + (4 + sum (take 1 some_squares_from (4-1) (2+1)))) 
= 1 + (4 + sum (take 1 some_squares_from 3 (2+1))))
= 1 + (4 + sum (take 1 (v*v :: some_squares_from (3-1) (v+1)))) where v = 2+1
= 1 + (4 + sum (take 1 (v*v :: some_squares_from (3-1) (v+1)))) where v = 2+1
= 1 + (4 + sum ( v*v :: take (1-1) (some_squares_from (3-1) (v+1)))) where v = 2+1
= 1 + (4 + (v*v + sum ( take (1-1) (some_squares_from (3-1) (v+1))))) where v = 2+1
= 1 + (4 + (v*v + sum ( take (1-1) (some_squares_from (3-1) (v+1))))) where v = 3
= 1 + (4 + (3*3 + sum ( take (1-1) (some_squares_from (3-1) (3+1)))))
= 1 + (4 + (9 + sum ( take (1-1) (some_squares_from (3-1) (3+1)))))
= 1 + (4 + (9 + sum ( take 0 (some_squares_from (3-1) (3+1)))))
= 1 + (4 + (9 + sum ( [] )))
= 1 + (4 + (9 + 0)
= 1 + (4 + 9)
= 1 + 13
= 14
 
















